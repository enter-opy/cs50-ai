import os
import random
import re
import sys

DAMPING = 0.85
SAMPLES = 10000


def main():
    if len(sys.argv) != 2:
        sys.exit("Usage: python pagerank.py corpus")
    corpus = crawl(sys.argv[1])
    ranks = sample_pagerank(corpus, DAMPING, SAMPLES)
    print(f"PageRank Results from Sampling (n = {SAMPLES})")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")
    ranks = iterate_pagerank(corpus, DAMPING)
    print(f"PageRank Results from Iteration")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")


def crawl(directory):
    """
    Parse a directory of HTML pages and check for links to other pages.
    Return a dictionary where each key is a page, and values are
    a list of all other pages in the corpus that are linked to by the page.
    """
    pages = dict()

    # Extract all links from HTML files
    for filename in os.listdir(directory):
        if not filename.endswith(".html"):
            continue
        with open(os.path.join(directory, filename)) as f:
            contents = f.read()
            links = re.findall(r"<a\s+(?:[^>]*?)href=\"([^\"]*)\"", contents)
            pages[filename] = set(links) - {filename}

    # Only include links to other pages in the corpus
    for filename in pages:
        pages[filename] = set(
            link for link in pages[filename]
            if link in pages
        )

    return pages


def transition_model(corpus, page, damping_factor):
    """
    Return a probability distribution over which page to visit next,
    given a current page.

    With probability `damping_factor`, choose a link at random
    linked to by `page`. With probability `1 - damping_factor`, choose
    a link at random chosen from all pages in the corpus.
    """
    probability_distribution = dict()

    # With probability 1 - damping_factor, the random surfer should randomly choose one of all pages in the corpus with equal probability
    for _page in corpus:
        probability_distribution[_page] = (1 - damping_factor) / len(corpus)

    # With probability damping_factor, the random surfer should randomly choose one of the links from page with equal probability
    for _page in probability_distribution:
        if _page in corpus[page]:
            probability_distribution[_page] += damping_factor / len(corpus[page])
        
    return probability_distribution


def sample_pagerank(corpus, damping_factor, n):
    """
    Return PageRank values for each page by sampling `n` pages
    according to transition model, starting with a page at random.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    # The return value of the function should be a Python dictionary with one key for each page in the corpus
    pagerank = dict()

    for page in corpus:
        pagerank[page] = 0
    
    # The first sample should be generated by choosing from a page at random
    sample = random.choice(list(corpus.keys()))

    # For each of the remaining samples, the next sample should be generated from the previous sample based on the previous sample’s transition model
    for i in range(n):
        pagerank[sample] += 1 / n
        
        current_distribution = transition_model(corpus, sample, damping_factor)
        sample_list = list(current_distribution.keys())
        weights = current_distribution.values()
        sample = random.choices(sample_list, weights, k=1)[0]

    return pagerank

def iterate_pagerank(corpus, damping_factor):
    """
    Return PageRank values for each page by iteratively updating
    PageRank values until convergence.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    flag = False

    # The return value of the function should be a Python dictionary with one key for each page in the corpus. Each key should be mapped to a value representing that page’s PageRank
    pagerank = dict()
    N = len(corpus)

    for page in corpus:
        pagerank[page] = 1 / N
    
    # The function should then repeatedly calculate new rank values based on all of the current rank values, according to the PageRank formula in the “Background” section
    while True:
        for page in corpus:
            current_pagerank = pagerank[page]
            pagerank[page] = (1 - damping_factor) / N

            for i in corpus:
                if page in corpus[i]:
                    pagerank[page] += damping_factor * pagerank[i] / len(corpus[i])
        
            # This process should repeat until no PageRank value changes by more than 0.001 between the current rank values and the new rank values
            if abs(pagerank[page] - current_pagerank) < 0.001:
                flag = True
        
        if flag:
            break
    
    return pagerank


if __name__ == "__main__":
    main()
